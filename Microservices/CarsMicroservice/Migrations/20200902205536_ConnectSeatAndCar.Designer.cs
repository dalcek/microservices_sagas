// <auto-generated />
using System;
using CarsMicroservice.Models.ContextData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarsMicroservice.Migrations
{
    [DbContext(typeof(RentACarContext))]
    [Migration("20200902205536_ConnectSeatAndCar")]
    partial class ConnectSeatAndCar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CarsMicroservice.Models.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentACarID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvrageRating")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Model")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Passengers")
                        .HasColumnType("int");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("double");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RentACarID");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.CarReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("PickUpLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PickUpTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RatedCar")
                        .HasColumnType("int");

                    b.Property<int>("RatedCompany")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.Property<string>("ResUser")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReturnLocation")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReturnTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SeatReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("RentACarID");

                    b.ToTable("CarReservation");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int?>("CarReservationId")
                        .HasColumnType("int");

                    b.Property<string>("DateStr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("QuickReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("CarReservationId");

                    b.HasIndex("QuickReservationId");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.ExtraAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CarReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("OneTimePayment")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CarReservationId");

                    b.HasIndex("RentACarID");

                    b.ToTable("ExtraAmenity");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.QuickReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DiscountedCarID")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountedCarID");

                    b.HasIndex("RentACarID");

                    b.ToTable("QuickReservation");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int?>("RentACarID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("RentACarID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.RentACar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AvrageRating")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MainLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("ID");

                    b.HasIndex("MainLocationId");

                    b.ToTable("RentACarCompanies");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Address", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("Locations")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Car", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("Cars")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.CarReservation", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID");

                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Date", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.Car", null)
                        .WithMany("RentedDates")
                        .HasForeignKey("CarID");

                    b.HasOne("CarsMicroservice.Models.Model.CarReservation", null)
                        .WithMany("Dates")
                        .HasForeignKey("CarReservationId");

                    b.HasOne("CarsMicroservice.Models.Model.QuickReservation", null)
                        .WithMany("Dates")
                        .HasForeignKey("QuickReservationId");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.ExtraAmenity", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.CarReservation", null)
                        .WithMany("Extras")
                        .HasForeignKey("CarReservationId");

                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("extras")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.QuickReservation", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.Car", "DiscountedCar")
                        .WithMany()
                        .HasForeignKey("DiscountedCarID");

                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("QuickReservations")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.Rating", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.Car", null)
                        .WithMany("Ratings")
                        .HasForeignKey("CarID");

                    b.HasOne("CarsMicroservice.Models.Model.RentACar", null)
                        .WithMany("Ratings")
                        .HasForeignKey("RentACarID");
                });

            modelBuilder.Entity("CarsMicroservice.Models.Model.RentACar", b =>
                {
                    b.HasOne("CarsMicroservice.Models.Model.Address", "MainLocation")
                        .WithMany()
                        .HasForeignKey("MainLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
